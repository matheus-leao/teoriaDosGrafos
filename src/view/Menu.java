/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.Dom4JDriver;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.Aresta;
import model.Grafo;
import model.TipoGrafo;
import model.Vertice;


/**
 *
 * @author Math
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    private Vertice vertice;
    private Aresta aresta;
    private Grafo grafo = new Grafo();
    private ArrayList<Vertice> listaVertice = new ArrayList<Vertice>();
    private ArrayList<Aresta> listaAresta = new ArrayList<Aresta>();
    private List<List<Vertice>> listaAdjacencia = new ArrayList<List<Vertice>>();
    private List<Vertice> nosVisitados = new ArrayList<Vertice>();
    private List<Vertice> todosNos = new ArrayList<Vertice>();
    private List<Vertice> nosDestino = new ArrayList<Vertice>();
    private List<Vertice> nosOrigem = new ArrayList<Vertice>();
    XStream xstream = new XStream(new DomDriver());
    
    
    public Menu() {
        initComponents();
        xstream.alias("Node", Vertice.class);
        xstream.alias("Graph", Grafo.class);
        xstream.alias("edge", Aresta.class);
        xstream.omitField(Aresta.class, "v1");
        xstream.omitField(Aresta.class, "v2");
        xstream.useAttributeFor("source", String.class);
        xstream.useAttributeFor("target", String.class);
        xstream.addImplicitCollection(Grafo.class, "listaVertice", Vertice.class);
        xstream.addImplicitCollection(Grafo.class, "listaAresta", Aresta.class);
        xstream.useAttributeFor("id", String.class);
        xstream.useAttributeFor("valor", int.class);
        xstream.useAttributeFor("ordenacao", TipoGrafo.class);
        xstream.aliasAttribute("edgedefault", "tipo");
        
    }
     
    
        
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jLabel5 = new javax.swing.JLabel();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textAresta = new javax.swing.JTextField();
        textVertice = new javax.swing.JTextField();
        InsereVertice = new javax.swing.JButton();
        InsereAresta = new javax.swing.JButton();
        vertice1 = new javax.swing.JComboBox();
        vertice2 = new javax.swing.JComboBox();
        nomeGrafo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        criarMatrizIncidencia = new javax.swing.JButton();
        CriarMatrizAdjacencia = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        CriarListaAdjacencia = new javax.swing.JToggleButton();
        CriarConjunto = new javax.swing.JButton();
        InformacoesGrafo = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAresta = new javax.swing.JTable();
        DeletaAresta = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableVertice = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        valor = new javax.swing.JTextField();
        salvarGrafo = new javax.swing.JButton();
        abrirGrafo = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButtonDijkstra = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Inserir Aresta");

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("Inserir");

        jLabel5.setText("jLabel5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 701, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 701));

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel1.setText("Criação de Grafos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 11, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Inserir Aresta");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 220, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Inserir Vértice");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 220, -1, -1));

        textAresta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textArestaActionPerformed(evt);
            }
        });
        getContentPane().add(textAresta, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 243, 136, 28));

        textVertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textVerticeActionPerformed(evt);
            }
        });
        getContentPane().add(textVertice, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 243, 124, 28));

        InsereVertice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        InsereVertice.setText("Inserir");
        InsereVertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirVertice(evt);
            }
        });
        getContentPane().add(InsereVertice, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 281, 136, 36));

        InsereAresta.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        InsereAresta.setText("Inserir");
        InsereAresta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirAresta(evt);
            }
        });
        getContentPane().add(InsereAresta, new org.netbeans.lib.awtextra.AbsoluteConstraints(272, 397, 136, 36));

        getContentPane().add(vertice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(272, 335, 136, -1));

        vertice2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertice2ActionPerformed(evt);
            }
        });
        getContentPane().add(vertice2, new org.netbeans.lib.awtextra.AbsoluteConstraints(272, 371, 136, -1));

        nomeGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeGrafoActionPerformed(evt);
            }
        });
        getContentPane().add(nomeGrafo, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 63, 136, 27));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Inserir Nome do grafo");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 66, 171, -1));

        criarMatrizIncidencia.setText("Matriz Incidencia");
        criarMatrizIncidencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarMatrizIncidenciaActionPerformed(evt);
            }
        });
        getContentPane().add(criarMatrizIncidencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 334, 135, 34));

        CriarMatrizAdjacencia.setText("Matriz Adjacencia");
        CriarMatrizAdjacencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CriarMatrizAdjacenciaActionPerformed(evt);
            }
        });
        getContentPane().add(CriarMatrizAdjacencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 386, 135, 33));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setText("Opções Adicionais");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 306, -1, -1));

        CriarListaAdjacencia.setText("Lista Adjacencia");
        CriarListaAdjacencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CriarListaAdjacenciaActionPerformed(evt);
            }
        });
        getContentPane().add(CriarListaAdjacencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 435, 135, 33));

        CriarConjunto.setText("Conjunto");
        CriarConjunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CriarConjuntoActionPerformed(evt);
            }
        });
        getContentPane().add(CriarConjunto, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 486, 135, 33));

        InformacoesGrafo.setText("InformaçõesGrafo");
        InformacoesGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InformacoesGrafoActionPerformed(evt);
            }
        });
        getContentPane().add(InformacoesGrafo, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 541, 135, 33));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jRadioButton1.setText("Grafo Orientado");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1grafoOrdenado(evt);
            }
        });
        getContentPane().add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 133, 136, 35));

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jRadioButton2.setText("Grafo não Orientado");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2grafoNaoOrdenado(evt);
            }
        });
        getContentPane().add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(233, 138, 190, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Inserção");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 175, 262, 27));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Deletar");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(844, 266, -1, -1));

        jTableAresta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Source", "Target", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableAresta);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(664, 306, 280, 230));

        DeletaAresta.setText("Deleta Aresta");
        DeletaAresta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletaArestaActionPerformed(evt);
            }
        });
        getContentPane().add(DeletaAresta, new org.netbeans.lib.awtextra.AbsoluteConstraints(764, 556, -1, -1));

        jTableVertice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableVertice);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(974, 306, 99, 230));

        jButton3.setText("Deleta Vertice");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(974, 556, -1, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Valor:");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(227, 281, -1, -1));

        valor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valorActionPerformed(evt);
            }
        });
        getContentPane().add(valor, new org.netbeans.lib.awtextra.AbsoluteConstraints(272, 281, 140, -1));

        salvarGrafo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        salvarGrafo.setText("Salvar Grafo");
        salvarGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarGrafoActionPerformed(evt);
            }
        });
        getContentPane().add(salvarGrafo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 470, 110, 40));

        abrirGrafo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        abrirGrafo.setText("Abrir Grafo");
        abrirGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirGrafoActionPerformed(evt);
            }
        });
        getContentPane().add(abrirGrafo, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 470, -1, 40));

        jToggleButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jToggleButton1.setText("Mostrar Grafo");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1mostrarGrafo(evt);
            }
        });
        getContentPane().add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 470, -1, 40));

        jButtonDijkstra.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonDijkstra.setText("Dijkstra");
        jButtonDijkstra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDijkstraActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonDijkstra, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 610, -1, -1));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel17.setText("Algoritmos");
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 560, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textArestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textArestaActionPerformed
                // TODO add your handling code here:
    }//GEN-LAST:event_textArestaActionPerformed

    private void textVerticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textVerticeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textVerticeActionPerformed

    private void inserirAresta(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirAresta
        aresta = new Aresta();
        aresta.setNome(textAresta.getText());
        if(valor.getText() == ""){
           aresta.setValor(0);
        }else{
           aresta.setValor(parseInt(valor.getText()));
        }
        aresta.setV1(listaVertice.get(vertice1.getSelectedIndex()));
        aresta.setV2(listaVertice.get(vertice2.getSelectedIndex()));
        listaAresta.add(aresta);
        
        textAresta.setText(null);
        valor.setText(null);
        
        DefaultTableModel linha = (DefaultTableModel) jTableAresta.getModel();
        
        linha.addRow(new String[]{aresta.getNome(), aresta.getSource(), aresta.getTarget(), Integer.toString(aresta.getValor())});

    }//GEN-LAST:event_inserirAresta

    private void inserirVertice(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirVertice
        vertice = new Vertice();
        vertice.setNome(textVertice.getText());
        listaVertice.add(vertice);
        
        vertice1.addItem(vertice.getId());
        vertice2.addItem(vertice.getId());
        DefaultTableModel linha = (DefaultTableModel) jTableVertice.getModel();
        linha.addRow(new String[]{vertice.getId()});
        textVertice.setText(null);
    }//GEN-LAST:event_inserirVertice

    private void vertice2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertice2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vertice2ActionPerformed

    private void nomeGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeGrafoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeGrafoActionPerformed

    private void criarMatrizIncidenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarMatrizIncidenciaActionPerformed
        int control = 0;
        String matrizIncidencia = "";
        Grafo g = grafo;
        int[][] v = g.criarMatrizIncidencia(g);
        for (int i = 0; i <= (g.getListaAresta().size() - 1); i++) {
            matrizIncidencia += "\n Matriz Incidencia \n";
            if (control == 0) {    
                control = 1;
                matrizIncidencia += "  " + g.getListaAresta().get(i).getNome();
            } else {
                matrizIncidencia += "  " + g.getListaAresta().get(i).getNome();
            }
        }
        for (int j = 0; j <= (g.getListaVertice().size() - 1); j++) {
            matrizIncidencia += "\n";
            matrizIncidencia += "                  " + g.getListaVertice().get(j).getId();
            for (int i = 0; i <= (g.getListaAresta().size() - 1); i++) {
                matrizIncidencia += "  " + v[j][i];
            }
        }
        
        JOptionPane.showMessageDialog(null, matrizIncidencia);
    }//GEN-LAST:event_criarMatrizIncidenciaActionPerformed

    private void CriarMatrizAdjacenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CriarMatrizAdjacenciaActionPerformed
        int control = 0;
        String matrizIncidencia = "";
        Grafo g = grafo;
        int[][] v = g.criarMatrizIncidencia(g);
        for (int i = 0; i <= (g.getListaAresta().size() - 1); i++) {
            matrizIncidencia += "\n Matriz Incidencia \n";
            if (control == 0) {    
                control = 1;
                matrizIncidencia += "  " + g.getListaAresta().get(i).getNome();
            } else {
                matrizIncidencia += "  " + g.getListaAresta().get(i).getNome();
            }
        }
        for (int j = 0; j <= (g.getListaVertice().size() - 1); j++) {
            matrizIncidencia += "\n";
            matrizIncidencia += "                  " + g.getListaVertice().get(j).getId();
            for (int i = 0; i <= (g.getListaAresta().size() - 1); i++) {
                matrizIncidencia += "  " + v[j][i];
            }
        }
        
        JOptionPane.showMessageDialog(null, matrizIncidencia);
    }//GEN-LAST:event_CriarMatrizAdjacenciaActionPerformed

    private void CriarListaAdjacenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CriarListaAdjacenciaActionPerformed
        String listaAdjacenciaImpressao = " Lista de Adjacencia ";
        
        ArrayList<ArrayList> listaAdjacencia = grafo.criarListaAdjacencia(grafo);
        for (int i = 0; i < listaAdjacencia.size(); i++) {
            ArrayList<String> lista = listaAdjacencia.get(i);
            listaAdjacenciaImpressao += "\n";
            for (int j = 0; j < lista.size(); j++) {
                listaAdjacenciaImpressao += lista.get(j) + "->";
                if (j == (lista.size() - 1)) {
                    listaAdjacenciaImpressao += "null";
                }
            }
        }
        JOptionPane.showMessageDialog(null, listaAdjacenciaImpressao);
    }//GEN-LAST:event_CriarListaAdjacenciaActionPerformed

    private void CriarConjuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CriarConjuntoActionPerformed
       String criarConjunto = "Conjunto:";
        for (Vertice v : grafo.getListaVertice()) {
            criarConjunto += "\nvertices: " + v.getId();
        }
        for (Aresta a : grafo.getListaAresta()) {
            criarConjunto += "\nAresta: ->" + a.getNome();
            criarConjunto += " vertices: " + a.getSource() + "  " + a.getTarget();
        }
        JOptionPane.showMessageDialog(null, criarConjunto);
    }//GEN-LAST:event_CriarConjuntoActionPerformed

    private void InformacoesGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InformacoesGrafoActionPerformed

        String informacoesGrafos = "";
        informacoesGrafos += "\n A ordem do grafo é: " + grafo.getListaVertice().size();
        informacoesGrafos += "\n\n Incidentes do Grafo: ";
        for (int i = 0; i <= grafo.getListaAresta().size() - 1; i++) {
            informacoesGrafos += "\n Os vertices: " + grafo.getListaAresta().get(i).getSource() + " e " + grafo.getListaAresta().get(i).getTarget() + " são incidentes a aresta: " + grafo.getListaAresta().get(i).getNome();
        }
        informacoesGrafos += "\n\n Adjacentes do Grafo: ";
        for (int i = 0; i <= grafo.getListaAresta().size() - 1; i++) {
            informacoesGrafos += "\n Os vertices: " + grafo.getListaAresta().get(i).getSource() + " e " + grafo.getListaAresta().get(i).getTarget() + " são adjacentes a aresta: " + grafo.getListaAresta().get(i).getNome();
        }
        if (grafo.getOrdenacao() == TipoGrafo.unidirected) {
            for (int i = 0; i <= grafo.getListaAresta().size() - 1; i++) {
                String vertice1 = grafo.getListaAresta().get(i).getSource();
                String vertice2 = grafo.getListaAresta().get(i).getTarget();
                for (int j = 0; j <= grafo.getListaAresta().size() - 1; j++) {
                    String vertice3 = grafo.getListaAresta().get(j).getSource();
                    String vertice4 = grafo.getListaAresta().get(j).getTarget();
                    if (grafo.getListaAresta().get(i).getNome() == grafo.getListaAresta().get(j).getNome()) {
                        break;
                    } else if (vertice1.equals(vertice3) || vertice2.equals(vertice4) || vertice1.equals(vertice4) || vertice2.equals(vertice3)) {
                        informacoesGrafos += "\n As arestas: " + grafo.getListaAresta().get(i).getNome() + " e " + grafo.getListaAresta().get(j).getNome() + " são adjacentes";

                    }
                }
            }
        }

        informacoesGrafos += "\n\n Grau dos vertices: ";
        int x = 0;
        int y = 0;
        if (grafo.getOrdenacao() == TipoGrafo.unidirected) {
            for (int i = 0; i <= grafo.getListaVertice().size() - 1; i++) {
                String vertice1 = grafo.getListaVertice().get(i).getId();
                for (int j = 0; j <= grafo.getListaAresta().size() - 1; j++) {
                    if (vertice1.equals(grafo.getListaAresta().get(j).getSource()) || vertice1.equals(grafo.getListaAresta().get(j).getTarget())) {
                        x++;
                    }
                }
                informacoesGrafos += "\n vertice: " + grafo.getListaVertice().get(i).getId() + ": " + x;
                x = 0;
            }
        }
        if (grafo.getOrdenacao() == TipoGrafo.directed) {
            for (int i = 0; i <= grafo.getListaVertice().size() - 1; i++) {
                String vertice1 = grafo.getListaVertice().get(i).getId();
                for (int j = 0; j <= grafo.getListaAresta().size() - 1; j++) {
                    if (vertice1.equals(grafo.getListaAresta().get(j).getSource())) {
                        x++;
                    }
                    if (vertice1.equals(grafo.getListaAresta().get(j).getTarget())) {
                        y++;
                    }
                }
                informacoesGrafos += "\n vertice: " + grafo.getListaVertice().get(i).getId() + " Grau de Emissão: " + x;
                informacoesGrafos += "\n vertice: " + grafo.getListaVertice().get(i).getId() + " Grau de Recepção: " + y;
                x = 0;
                y = 0;
            }
        }
        JOptionPane.showMessageDialog(null, informacoesGrafos);
       
    }//GEN-LAST:event_InformacoesGrafoActionPerformed

    private void jRadioButton1grafoOrdenado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1grafoOrdenado
        //Seta se o grafo é ordenado
        grafo.setOrdenacao(TipoGrafo.directed);
    }//GEN-LAST:event_jRadioButton1grafoOrdenado

    private void jRadioButton2grafoNaoOrdenado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2grafoNaoOrdenado
        //Seta se o grafo é não ordenado
        grafo.setOrdenacao(TipoGrafo.unidirected);
    }//GEN-LAST:event_jRadioButton2grafoNaoOrdenado

    private void DeletaArestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletaArestaActionPerformed
        listaAresta.remove(jTableAresta.getSelectedRow());
        ((DefaultTableModel) jTableAresta.getModel()).removeRow(jTableAresta.getSelectedRow());
    }//GEN-LAST:event_DeletaArestaActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        listaVertice.remove(jTableVertice.getSelectedRow());
        ((DefaultTableModel) jTableVertice.getModel()).removeRow(jTableVertice.getSelectedRow());

    }//GEN-LAST:event_jButton3ActionPerformed

    private void valorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valorActionPerformed

    private void salvarGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarGrafoActionPerformed
        grafo.setNome(nomeGrafo.getText());
        grafo.novaListaAresta(listaAresta);
        grafo.novaListaVertice(listaVertice);
        nomeGrafo.setText(null);

        //        String nomeGrafoxml = "";
        //        nomeGrafoxml = grafo.getNome();
        //        nomeGrafoxml+= ".xml";

        String xml = xstream.toXML(grafo);

        System.out.println(xml);
        grafo = null;
        grafo = (Grafo) xstream.fromXML(xml);

        xml = xstream.toXML(grafo);
        System.out.println(xml);

        try {
            File xmlFile = new File("arq.xml");
            xstream.toXML(grafo, new FileWriter(xmlFile));
        } catch (IOException ex) {
            System.out.println("Erro ao Gravar Arquivo");
        }
    }//GEN-LAST:event_salvarGrafoActionPerformed

    private void abrirGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirGrafoActionPerformed
        //Abrir do arquivo xml
        DefaultTableModel linhaVertice = (DefaultTableModel) jTableVertice.getModel();
        DefaultTableModel linhaAresta = (DefaultTableModel) jTableAresta.getModel();
        File xmlFileLer = null;
        JFileChooser arquivo = new JFileChooser();
        FileNameExtensionFilter filtroXML = new FileNameExtensionFilter("Arquivos XML", "xml");
        arquivo.addChoosableFileFilter(filtroXML);
        arquivo.setAcceptAllFileFilterUsed(false);
        if (arquivo.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            xmlFileLer = new File(arquivo.getSelectedFile().getAbsolutePath());
        }

        //        xmlFileLer = new File("arq.xml");
        Grafo grafoLer = (Grafo) xstream.fromXML(xmlFileLer);
        String xmlLer = xstream.toXML(grafoLer);
        System.out.println(xmlLer);
        this.grafo = grafoLer;

        for (int i = 0; i< listaVertice.size(); i++){
            linhaVertice.removeRow(i);
        }
        for (int i = 0; i< listaAresta.size(); i++){
            linhaAresta.removeRow(i);
        }

        this.listaAresta = null;
        this.listaVertice = null;
        this.listaAresta = grafo.getListaAresta();
        this.listaVertice = grafo.getListaVertice();

        for (Vertice n : listaVertice) {
            linhaVertice.addRow(new String[]{n.getId()});
        }

        for (Aresta n : listaAresta){
            linhaAresta.addRow(new String[]{n.getNome(), n.getSource(), n.getTarget(), Integer.toString(n.getValor())});

        }

    }//GEN-LAST:event_abrirGrafoActionPerformed

    private void jToggleButton1mostrarGrafo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1mostrarGrafo
        try {
            String grafoTxt = "";
            if (grafo.getOrdenacao() == TipoGrafo.unidirected) {
                grafoTxt = "graph G {\n";
            } else {
                grafoTxt = "digraph G {\n";
            }
            grafoTxt = grafoTxt + "node[margin=0 fontcolor=blue  width=0.5 shape=circle style=filled];\n";
            for (Vertice v : grafo.getListaVertice()) {
                grafoTxt = grafoTxt + v.getId();
                //                grafoTxt = grafoTxt + v.getNome() + "[fillcolor =" + v.getCores(2) + "]";
                grafoTxt = grafoTxt + ";\n";
            }
            if (grafo.getOrdenacao() == TipoGrafo.unidirected) {
                grafoTxt = grafoTxt + grafo.formataArestas(grafo.getListaAresta(), "--");
            } else {
                grafoTxt = grafoTxt + grafo.formataArestas(grafo.getListaAresta(), "->");
            }
            grafoTxt = grafoTxt + "}";

            System.out.println(grafoTxt);

            Process p;
            File arquivo = new File("file.dot");
            try (FileWriter fw = new FileWriter(arquivo)) {
                fw.write(grafoTxt);
                fw.flush();
            } catch (IOException ex) {
                System.out.println("Erro ao Criar Arquivo: " + ex.getMessage());
            }
            String commandLine = " dot -Tpng " + arquivo.getCanonicalPath() + " -o file.png";

            p = Runtime.getRuntime().exec(commandLine);
            while (p.isAlive()) {
            }

            File arqImg = new File("file.png");
            ImageIcon image = new ImageIcon(arqImg.getCanonicalPath());
            image.getImage().flush();
            JOptionPane.showMessageDialog(null, image);
        } catch (IOException ex) {
            System.out.println("Erro do Executar Comando: " + ex.getMessage());
        }
    }//GEN-LAST:event_jToggleButton1mostrarGrafo

    private void jButtonDijkstraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDijkstraActionPerformed

        Grafo g = grafo.copiaGrafo(grafo, grafo.getNome() + "-dijkstra");

        List<Vertice> listaNosFechados = new ArrayList<>();

        List<Vertice> listaNosAbertos = new ArrayList<>();
        int qtNos = listaVertice.size();

        int[][] matrizD = new int[qtNos][qtNos];

        listaNosAbertos.addAll(listaVertice);

        String verticeRaiz = JOptionPane.showInputDialog("Digite o vértice raiz:");

        int[] tabelaD = new int[listaNosAbertos.size() - 1];

        List<Vertice> lista = new ArrayList<>();
        lista.addAll(listaNosAbertos);

        for (int i = 0; i < tabelaD.length; i++) {
            tabelaD[i] = Integer.MAX_VALUE;
        }

        Vertice vo = null;
        while (listaNosAbertos.size() > 0) {
            Vertice v = null;

            int distanciaAnterior = 0;
            if (listaNosFechados.size() == 0) {

                v = Vertice.getVerticeById(verticeRaiz, listaNosAbertos);
                vo = v;
            } else {
                v = listaNosAbertos.get(0);

            }
            listaNosFechados.add(v);
            listaNosAbertos.remove(v);

            if (v != vo) {
                distanciaAnterior = tabelaD[listaNosFechados.size() - 2];
                if (distanciaAnterior == Integer.MAX_VALUE) {
                    distanciaAnterior = 0;
                }

            }

            int i = listaNosFechados.size() - 1;
            for (Vertice a : listaNosAbertos) {
                Aresta a1 = Aresta.getArestaByVertices(v, a, listaAresta);
                if (a1 == null) {

                } else if (tabelaD[i] > a1.getValor() + distanciaAnterior) {
                    tabelaD[i] = a1.getValor() + distanciaAnterior;
                }
                i++;
            }

            for (int j = 0; j < tabelaD.length; j++) {
                System.out.print(tabelaD[j] + "- ");
            }
            System.out.println("");

        }

        int p = 1;
        String imprime = "";
        for (int j = 0; j < tabelaD.length; j++) {
            imprime += "(" + verticeRaiz + " , " + lista.get(p).getId() + ") = " + tabelaD[j] + "\n";
            p++;
        }

        JOptionPane.showMessageDialog(null, "Caminho Minímo:\n" + imprime);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonDijkstraActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CriarConjunto;
    private javax.swing.JToggleButton CriarListaAdjacencia;
    private javax.swing.JButton CriarMatrizAdjacencia;
    private javax.swing.JButton DeletaAresta;
    private javax.swing.JButton InformacoesGrafo;
    private javax.swing.JButton InsereAresta;
    private javax.swing.JButton InsereVertice;
    private javax.swing.JButton abrirGrafo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JButton criarMatrizIncidencia;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonDijkstra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableAresta;
    private javax.swing.JTable jTableVertice;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextField nomeGrafo;
    private javax.swing.JButton salvarGrafo;
    private javax.swing.JTextField textAresta;
    private javax.swing.JTextField textVertice;
    private javax.swing.JTextField valor;
    private javax.swing.JComboBox vertice1;
    private javax.swing.JComboBox vertice2;
    // End of variables declaration//GEN-END:variables
}
